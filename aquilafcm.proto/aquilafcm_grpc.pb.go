// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0
// source: proton/aquilafcm.proto

package aquilafcm_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AquilaFCMService_SendSingleToken_FullMethodName     = "/aquilafcm.AquilaFCMService/SendSingleToken"
	AquilaFCMService_SendSingleTokenBulk_FullMethodName = "/aquilafcm.AquilaFCMService/SendSingleTokenBulk"
)

// AquilaFCMServiceClient is the client API for AquilaFCMService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AquilaFCMServiceClient interface {
	SendSingleToken(ctx context.Context, in *SendSingleTokenRequest, opts ...grpc.CallOption) (*SendSingleTokenResponse, error)
	SendSingleTokenBulk(ctx context.Context, in *SendSingleTokenBulkRequest, opts ...grpc.CallOption) (*SendSingleTokenBulkResponse, error)
}

type aquilaFCMServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAquilaFCMServiceClient(cc grpc.ClientConnInterface) AquilaFCMServiceClient {
	return &aquilaFCMServiceClient{cc}
}

func (c *aquilaFCMServiceClient) SendSingleToken(ctx context.Context, in *SendSingleTokenRequest, opts ...grpc.CallOption) (*SendSingleTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendSingleTokenResponse)
	err := c.cc.Invoke(ctx, AquilaFCMService_SendSingleToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aquilaFCMServiceClient) SendSingleTokenBulk(ctx context.Context, in *SendSingleTokenBulkRequest, opts ...grpc.CallOption) (*SendSingleTokenBulkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendSingleTokenBulkResponse)
	err := c.cc.Invoke(ctx, AquilaFCMService_SendSingleTokenBulk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AquilaFCMServiceServer is the server API for AquilaFCMService service.
// All implementations must embed UnimplementedAquilaFCMServiceServer
// for forward compatibility.
type AquilaFCMServiceServer interface {
	SendSingleToken(context.Context, *SendSingleTokenRequest) (*SendSingleTokenResponse, error)
	SendSingleTokenBulk(context.Context, *SendSingleTokenBulkRequest) (*SendSingleTokenBulkResponse, error)
	mustEmbedUnimplementedAquilaFCMServiceServer()
}

// UnimplementedAquilaFCMServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAquilaFCMServiceServer struct{}

func (UnimplementedAquilaFCMServiceServer) SendSingleToken(context.Context, *SendSingleTokenRequest) (*SendSingleTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSingleToken not implemented")
}
func (UnimplementedAquilaFCMServiceServer) SendSingleTokenBulk(context.Context, *SendSingleTokenBulkRequest) (*SendSingleTokenBulkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSingleTokenBulk not implemented")
}
func (UnimplementedAquilaFCMServiceServer) mustEmbedUnimplementedAquilaFCMServiceServer() {}
func (UnimplementedAquilaFCMServiceServer) testEmbeddedByValue()                          {}

// UnsafeAquilaFCMServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AquilaFCMServiceServer will
// result in compilation errors.
type UnsafeAquilaFCMServiceServer interface {
	mustEmbedUnimplementedAquilaFCMServiceServer()
}

func RegisterAquilaFCMServiceServer(s grpc.ServiceRegistrar, srv AquilaFCMServiceServer) {
	// If the following call pancis, it indicates UnimplementedAquilaFCMServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AquilaFCMService_ServiceDesc, srv)
}

func _AquilaFCMService_SendSingleToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSingleTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AquilaFCMServiceServer).SendSingleToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AquilaFCMService_SendSingleToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AquilaFCMServiceServer).SendSingleToken(ctx, req.(*SendSingleTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AquilaFCMService_SendSingleTokenBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSingleTokenBulkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AquilaFCMServiceServer).SendSingleTokenBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AquilaFCMService_SendSingleTokenBulk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AquilaFCMServiceServer).SendSingleTokenBulk(ctx, req.(*SendSingleTokenBulkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AquilaFCMService_ServiceDesc is the grpc.ServiceDesc for AquilaFCMService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AquilaFCMService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aquilafcm.AquilaFCMService",
	HandlerType: (*AquilaFCMServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendSingleToken",
			Handler:    _AquilaFCMService_SendSingleToken_Handler,
		},
		{
			MethodName: "SendSingleTokenBulk",
			Handler:    _AquilaFCMService_SendSingleTokenBulk_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proton/aquilafcm.proto",
}
